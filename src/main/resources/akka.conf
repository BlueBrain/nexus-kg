akka {

  http {
    server {
      parsing.max-content-length = ${akka.remote.artery.advanced.maximum-frame-size}
      parsing.max-content-length = ${?AKKA_HTTP_SERVER_MAX_CONTENT_LENGTH}
      request-timeout = 1 minute
      request-timeout = ${?AKKA_HTTP_SERVER_REQ_TIMEOUT}
    }
    client {
      parsing.max-content-length = 10g
      parsing.max-content-length = ${?AKKA_HTTP_CLIENT_MAX_CONTENT_LENGTH}
    }
    host-connection-pool  {
      max-connections   = 16
      max-connections   = ${?AKKA_HTTP_MAX_CONNECTIONS}
      max-open-requests = 64
      max-open-requests = ${?AKKA_HTTP_MAX_OPEN_REQUESTS}
      idle-timeout = 10 minutes
      idle-timeout = ${?AKKA_HTTP_IDLE_TIMEOUT}
    }
    sse {
      # The maximum size for parsing server-sent events (96KiB).
      max-event-size = 98304
      max-event-size = ${?AKKA_HTTP_SSE_MAX_EVENT_SIZE}

      # The maximum size for parsing lines of a server-sent event (48KiB).
      max-line-size = 49152
      max-line-size = ${?AKKA_HTTP_SSE_MAX_LINE_SIZE}
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  loglevel = INFO
  loglevel = ${?AKKA_LOG_LEVEL}

  extensions += "akka.cluster.ddata.DistributedData"

  actor {

    provider = "akka.cluster.ClusterActorRefProvider"

    enable-additional-serialization-bindings = on

    allow-java-serialization = off

    serializers {
      circeEvent = "ch.epfl.bluebrain.nexus.kg.serializers.Serializer$EventSerializer"
      kryo       = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      # application values sent across the wire
      "ch.epfl.bluebrain.nexus.kg.resources.Event"                       = circeEvent
      "ch.epfl.bluebrain.nexus.kg.resources.Command"                     = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.State"                       = kryo
      "ch.epfl.bluebrain.nexus.iam.client.types.AccessControlLists"      = kryo
      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                        = kryo

      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                                       = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Start"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$FetchLatestState$" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$LatestState"       = kryo

      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$Start"                      = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$Stop"                       = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$ViewsAddedOrModified"       = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$RestartView"                = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$RestartProjection"          = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$Ack"                        = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$ViewsRemoved"               = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$UpdateRestart"              = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$ProjectChanges"             = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$FetchOffset"                = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$FetchStatistics"            = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$AclChanges"                 = kryo

      "ch.epfl.bluebrain.nexus.kg.async.ProjectAttributesCoordinator$Start"            = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectAttributesCoordinator$Stop$"             = kryo

      "ch.epfl.bluebrain.nexus.kg.archives.ArchiveCache$Write"   = kryo

      # key value store types
      "ch.epfl.bluebrain.nexus.kg.archives.Archive"                          = kryo
      "ch.epfl.bluebrain.nexus.kg.archives.Archive$ResourceDescription"      = kryo
      "ch.epfl.bluebrain.nexus.kg.archives.Archive$File"                     = kryo
      "ch.epfl.bluebrain.nexus.kg.archives.Archive$Resource"                 = kryo
      "ch.epfl.bluebrain.nexus.kg.indexing.View"                             = kryo
      "ch.epfl.bluebrain.nexus.kg.resolve.Resolver"                          = kryo
      "ch.epfl.bluebrain.nexus.rdf.Iri$AbsoluteIri"                          = kryo
      "ch.epfl.bluebrain.nexus.rdf.Iri$Path"                                 = kryo
      "ch.epfl.bluebrain.nexus.iam.client.types.ResourceAccessControlList"   = kryo
      "ch.epfl.bluebrain.nexus.iam.client.types.AccessControlList"           = kryo
      "ch.epfl.bluebrain.nexus.admin.client.types.Project"                   = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.ProjectIdentifier"               = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.ProjectIdentifier$ProjectRef"    = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.ProjectIdentifier$ProjectLabel"  = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.Id"                              = kryo
      "ch.epfl.bluebrain.nexus.kg.RevisionedValue"                           = kryo
      "java.util.UUID"                                                       = kryo
      "java.time.Instant"                                                    = kryo

      # generic values sent across the wire
      "scala.runtime.BoxedUnit"        = kryo
      "scala.collection.immutable.Set" = kryo
    }
  }

  cluster {
    min-nr-of-members = 1
    min-nr-of-members = ${?CLUSTER_MIN_NR_OF_MEMBERS}
    sharding.state-store-mode = ddata
  }

  remote {
    startup-timeout = 30 s
    artery {
      transport = tcp
      canonical.hostname = ${app.instance.interface}
      canonical.hostname = ${?REMOTING_INTERFACE}
      canonical.hostname = ${?override.remoting.interface}
      canonical.port = 2552
      canonical.port = ${?REMOTING_PORT}
      canonical.port = ${?override.remoting.port}
      advanced {
        maximum-frame-size = 512 KiB
        maximum-frame-size = ${?REMOTING_MAXIMUM_FRAME_SIZE}
      }
    }
  }

  persistence {
    journal.plugin = ${app.persistence.journal-plugin}
    snapshot-store.plugin = ${app.persistence.snapshot-store-plugin}
  }
}

akka-kryo-serialization {
  idstrategy = "automatic"

  # Log implicitly registered classes. Useful, if you want to know all classes which are serialized.
  implicit-registration-logging = true

  # Set compression
  post-serialization-transformations = "lz4"
  post-serialization-transformations = ${?KRYO_COMPRESSION}
}
