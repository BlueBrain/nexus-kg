akka {

  http {
    server.parsing.max-content-length = 10g
    host-connection-pool  {
      max-connections   = 16
      max-connections   = ${?AKKA_HTTP_MAX_CONNECTIONS}
      max-open-requests = 64
      max-open-requests = ${?AKKA_HTTP_MAX_OPEN_REQUESTS}
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  loglevel = INFO
  loglevel = ${?AKKA_LOG_LEVEL}

  extensions += "akka.cluster.ddata.DistributedData"
  extensions += "com.romix.akka.serialization.kryo.KryoSerializationExtension$"

  actor {

    kryo  {
      idstrategy = "automatic"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # Log implicitly registered classes. Useful, if you want to know all classes which are serialized.
      implicit-registration-logging = true

      # Set compression
      post-serialization-transformations = "lz4"
      post-serialization-transformations = ${?KRYO_COMPRESSION}
    }

    provider = "akka.cluster.ClusterActorRefProvider"

    enable-additional-serialization-bindings = on

    allow-java-serialization = off

    serializers {
      circeEvent  = "ch.epfl.bluebrain.nexus.kg.serializers.Serializer$EventSerializer"
      kryo        = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.kg.resources.Event"  = circeEvent
      "ch.epfl.bluebrain.nexus.kg.resources.Command" = kryo,
      "ch.epfl.bluebrain.nexus.kg.resources.State" = kryo,
      "ch.epfl.bluebrain.nexus.kg.async.RevisionedValue" = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinator$Msg" = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinator$Start" = kryo
      "ch.epfl.bluebrain.nexus.kg.acls.AclsActor$Refresh$" = kryo
      "ch.epfl.bluebrain.nexus.kg.acls.AclsActor$Fetch$" = kryo
      "ch.epfl.bluebrain.nexus.kg.acls.AclsActor$Stop$" = kryo
      "ch.epfl.bluebrain.nexus.kg.acls.AclsActor$AclsFetchError" = kryo
      "ch.epfl.bluebrain.nexus.iam.client.types.FullAccessControlList" = kryo

      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg" = kryo,
      "ch.epfl.bluebrain.nexus.service.indexer.stream.StreamCoordinator$Stop$" = kryo
      "ch.epfl.bluebrain.nexus.service.indexer.stream.StreamCoordinator$Start" = kryo

      "scala.runtime.BoxedUnit" = kryo
      "akka.actor.Status$Failure" = kryo
      "akka.actor.Status$Success" = kryo
    }
  }

  cluster {
    min-nr-of-members = 1
    sharding.state-store-mode = ddata
  }

  remote {
    # Startup timeout
    startup-timeout = 30 s
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${app.instance.interface}
      hostname = ${?REMOTING_INTERFACE}
      hostname = ${?override.remoting.interface}
      port = 2552
      port = ${?REMOTING_PORT}
      port = ${?override.remoting.port}
      # Sets the send buffer size of the Sockets (0b for platform defaults)
      send-buffer-size = ${?REMOTING_SEND_BUFFER_SIZE}
      # Sets the receive buffer size of the Sockets (0b for platform defaults)
      receive-buffer-size = ${?REMOTING_RECV_BUFFER_SIZE}
      # Maximum message size the transport will accept. Do not choose an arbitrary large value when using UDP,
      # since UDP does not support large datagrams.
      maximum-frame-size = ${?REMOTING_MAXIMUM_FRAME_SIZE}
    }
  }

  persistence {
    journal.plugin = ${app.persistence.journal-plugin}
    snapshot-store.plugin = ${app.persistence.snapshot-store-plugin}
  }
}
